# .pre-commit-config.yaml - Configuration automatisée complète
default_language_version:
  python: python3.10

repos:
  # Pre-commit hooks de base
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
      - id: check-json
      - id: check-toml
      - id: debug-statements
      - id: check-docstring-first
      - id: name-tests-test
        args: ['--pytest-test-first']
      - id: requirements-txt-fixer

  # Formatage automatique avec Black
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88, --target-version=py310]

  # Tri automatique des imports
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88, --multi-line=3]

  # Linting avec flake8
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args:
          - --max-line-length=88
          - --extend-ignore=E203,W503,E501
          - --max-complexity=10
          - --statistics
        additional_dependencies: [flake8-docstrings, flake8-bugbear]

  # Vérification de types avec mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-requests, types-PyYAML, types-setuptools]
        args: [--ignore-missing-imports, --strict, --show-error-codes]

  # Sécurité avec bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-c', '.bandit', '-r', '.']
        exclude: ^tests/

  # Vérification des dépendances
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: requirements.*\.txt$

  # Documentation et docstrings
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google, --add-ignore=D100,D101,D102,D103,D104,D105]

  # Détection de code mort
  - repo: https://github.com/jendrikseipp/vulture
    rev: v2.10
    hooks:
      - id: vulture
        args: [--min-confidence=80]

  # Conventional commits
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Hooks personnalisés pour l'automatisation
  - repo: local
    hooks:
      # Exécution automatique des tests rapides
      - id: pytest-quick
        name: Tests rapides automatiques
        entry: python -m pytest tests/unit/ -x --tb=short
        language: system
        types: [python]
        pass_filenames: false
        
      # Vérification automatique de la couverture
      - id: coverage-check
        name: Vérification couverture minimale
        entry: python -m pytest tests/ --cov=src --cov-fail-under=80 --cov-report=term-missing:skip-covered
        language: system
        types: [python]
        pass_filenames: false
        
      # Mise à jour automatique des requirements
      - id: requirements-update
        name: Vérification des requirements
        entry: python scripts/check_requirements.py
        language: system
        files: requirements.*\.txt$
        
      # Génération automatique de documentation
      - id: docs-build
        name: Build documentation automatique
        entry: python scripts/build_docs.py
        language: system
        files: ^(src/|docs/).*\.(py|md|rst)$
        pass_filenames: false

# Configuration pour différents environnements
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [pytest-quick, coverage-check]  # Skip sur CI pour éviter la duplication
  submodules: false